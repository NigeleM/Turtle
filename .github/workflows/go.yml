name: Go Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write  # Needed to push release files

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]  # macOS (Apple Silicon), Windows, and Linux (Ubuntu)

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history to ensure tags are included

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    # Install Clang (Windows)
    - name: Install Clang (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install llvm
        echo "C:\Program Files\LLVM\bin" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

    - name: Verify Clang installation (Windows)
      if: runner.os == 'Windows'
      run: clang --version

    # Install dependencies (Linux)
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang

    # Build for ${{ matrix.os }}
    - name: Build for ${{ matrix.os }}
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          # Build for Apple Silicon (arm64) only
          GOARCH=arm64 go build -o release/interpreter-v0.1.4-darwin-arm64
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          go build -o release/interpreter-v0.1.4.exe
        else
          go build -o release/interpreter-v0.1.4-linux
        fi

    # Ensure release directory exists before moving the files
    - name: Ensure release directory exists
      run: mkdir -p ./release

    # Create GitHub Release and Publish Binaries
    - name: Publish Binaries to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./release/*
        token: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token for authentication
        tag_name: v0.1.5
