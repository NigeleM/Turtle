name: Go Build and Release with Installers

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write  # Needed to push release files

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install inno-setup
      shell: pwsh

    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y dpkg-dev fakeroot

    - name: Ensure release directory exists
      run: mkdir -p ./release

    # Build Binaries

    - name: Build for macOS (Apple Silicon Only)
      if: runner.os == 'macOS'
      run: GOOS=darwin GOARCH=arm64 go build -o release/interpreter-darwin-arm64 .

    - name: Build for Linux
      if: runner.os == 'Linux'
      run: GOOS=linux GOARCH=amd64 go build -o release/interpreter-linux-amd64 .

    - name: Build for Windows
      if: runner.os == 'Windows'
      run: go build -o release/interpreter.exe .
      shell: pwsh

    # Create Installers

    ## Windows Installer (Inno Setup)
    - name: Create Windows Installer
      if: runner.os == 'Windows'
      run: |
        echo "[Setup]" > installer.iss
        echo "AppName=MyInterpreter" >> installer.iss
        echo "AppVersion=0.1.5" >> installer.iss
        echo "DefaultDirName={pf}\\MyInterpreter" >> installer.iss
        echo "OutputDir=release" >> installer.iss
        echo "OutputBaseFilename=interpreter-installer" >> installer.iss
        echo "Source: \"release\\interpreter.exe\"; DestDir: \"{app}\"" >> installer.iss
        iscc installer.iss
      shell: pwsh

    ## macOS Installer (PKG) - Apple Silicon Only
    - name: Create macOS Installer
      if: runner.os == 'macOS'
      run: |
        pkgbuild --root release --identifier com.mycompany.interpreter \
        --version 0.1.5 --install-location /Applications/interpreter.app \
        --component release/interpreter-darwin-arm64 release/interpreter.pkg

    ## Linux Installer (DEB)
    - name: Create Linux Installer
      if: runner.os == 'Linux'
      run: |
        mkdir -p deb_build/DEBIAN
        cat <<EOF > deb_build/DEBIAN/control
        Package: my-interpreter
        Version: 0.1.5
        Architecture: amd64
        Maintainer: Your Name <your@email.com>
        Description: My Interpreter
        EOF
        mkdir -p deb_build/usr/local/bin
        cp release/interpreter-linux-amd64 deb_build/usr/local/bin/interpreter
        chmod 755 deb_build/usr/local/bin/interpreter
        dpkg-deb --build deb_build release/interpreter.deb

    # Publish Binaries and Installers
    - name: Publish Installers to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/interpreter-darwin-arm64
          release/interpreter-linux-amd64
          release/interpreter.exe
          release/interpreter-installer.exe
          release/interpreter.pkg
          release/interpreter.deb
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v0.1.5
