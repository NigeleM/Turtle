name: Go Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write  # Needed to push release files

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]  # macOS, Windows, and Linux (Ubuntu)

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history to ensure tags are included

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    # Install Clang (Windows)
    - name: Install Clang (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install llvm
        echo "C:\Program Files\LLVM\bin" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

    - name: Verify Clang installation (Windows)
      if: runner.os == 'Windows'
      run: clang --version

    # Install dependencies (Linux)
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang

    # Debug: Show the tags in the repo
    - name: Debug Git Tags
      run: |
        echo "Available Git Tags:"
        git tag --list

    # Get the version from GITHUB_REF, which is prefixed with 'refs/tags/'
    - name: Set version from Git tag
      run: |
        VERSION=${GITHUB_REF#refs/tags/}  # Remove 'refs/tags/' prefix to get the tag name
        if [ -z "$VERSION" ]; then VERSION="v0.0.0"; fi  # Fallback if no tags found
        echo "Detected version: $VERSION"  # Debugging
        echo "VERSION=$VERSION" >> $GITHUB_ENV  # Set VERSION as an environment variable

    # Build the project with the version
    - name: Build
      run: go build -o interpreter-${{ env.VERSION }}.exe interpreter.go

    # Ensure the release directory exists before moving the files
    - name: Ensure release directory exists
      run: mkdir -p ./release

    # Move the built file to the release directory
    - name: Move build artifact to release directory
      run: mv interpreter-${{ env.VERSION }}.exe ./release/interpreter-${{ matrix.os }}-${{ env.VERSION }}

    # Create GitHub Release and Publish Binaries
    - name: Publish Binaries to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./release/*
        token: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token for authentication
      env:
        VERSION: ${{ env.VERSION }}
