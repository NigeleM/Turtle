name: Go Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    timeout-minutes: 30  # Timeout for the entire job
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]  # macOS, Windows, and Linux (Ubuntu)
        goarch: [amd64, arm64]  # Build for both amd64 and arm64 architectures
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    # Install Clang (Windows)
    - name: Install Clang (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install llvm
        echo "C:\Program Files\LLVM\bin" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

    # Verify Go source files
    - name: Verify Go source files
      run: |
        ls -l interpreter.go  # Ensure the Go source file exists

    - name: Build for ${{ matrix.os }}-${{ matrix.goarch }}
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.goarch }} go build -o myapp-${{ matrix.os }}-${{ matrix.goarch }} interpreter.go

    # Upload Binaries as Artifacts for Later Use
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: myapp-binaries
        path: |
          myapp-${{ matrix.os }}-${{ matrix.goarch }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Get the release version from the GitHub tag (if present)
    - name: Get Release Version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # Create GitHub Release
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          myapp-*-amd64
          myapp-*-arm64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
