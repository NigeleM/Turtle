name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]  # macOS, Windows, and Linux (Ubuntu) 

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    # Install Clang (Windows)
    - name: Install Clang (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install llvm
        echo "C:\Program Files\LLVM\bin" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

    - name: Verify Clang installation (Windows)
      if: runner.os == 'Windows'
      run: clang --version

    # Install dependencies (Linux)
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang

    # Get the latest Git tag for version
    - name: Get version from Git tag
      id: version
      run: |
        VERSION=$(git describe --tags --abbrev=0)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # Build the project with the tag as version
    - name: Build
      run: go build -o ./release/interpreter-${{ env.VERSION }}.exe interpreter.go

    # Archive Build Artifacts
    - name: Archive Build Artifacts
      run: |
        mkdir -p ./release
        mv interpreter-${{ env.VERSION }} ./release/interpreter-${{ matrix.os }}-${{ env.VERSION }}

    # Create GitHub Release and Publish Binaries
    - name: Publish Binaries to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
